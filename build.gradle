plugins {
  id("java-library")

  // To create a fat jar build/libs/...-all.jar, run: ./gradlew shadowJar
  id("com.gradleup.shadow").version("9.2.2")

  // Code formatting; defines targets "spotlessApply" and "spotlessCheck"
  // Requires JDK 11 or higher; the plugin crashes under JDK 8.
  id("com.diffplug.spotless").version("8.0.0")

  // Error Prone linter
  id("net.ltgt.errorprone").version("4.3.0")

  // Checker Framework pluggable type-checking
  id("org.checkerframework").version("0.6.60")
}

repositories {
  mavenCentral()
  maven { url = "https://central.sonatype.com/repository/maven-snapshots/" }
  gradlePluginPortal()
}

ext {
  errorproneVersion = "2.42.0"
  isJava17orHigher = JavaVersion.current() >= JavaVersion.VERSION_17
  isJava21orHigher = JavaVersion.current() >= JavaVersion.VERSION_21
}

dependencies {
  implementation("io.github.classgraph:classgraph:4.8.184")
  implementation("org.apache.commons:commons-lang3:3.19.0")
  implementation("org.apache.commons:commons-text:1.14.0")
  implementation("org.plumelib:reflection-util:1.1.5")

  testImplementation("org.junit.jupiter:junit-jupiter:5.14.0")
  testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

// To upload to Maven Central, see instructions in the file.
apply from: "${buildscript.sourceFile.parent}/gradle/mavencentral.gradle"

java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

// Work around https://github.com/johnrengelman/shadow/issues/324
configurations {
  toolsJar  // tools.jar contains the Javadoc tool
}
configurations.compileClasspath.extendsFrom(configurations.toolsJar)

test {
  useJUnitPlatform {
    includeEngines("junit-jupiter")
    excludeEngines("junit-vintage")
  }

  testLogging {
    outputs.upToDateWhen{false}
    showStandardStreams = true
    events("failed")
    exceptionFormat = "full"
  }
}

spotless {
  format "misc", {
    // define the files to apply `misc` to
    target("*.md", ".gitignore")

    // define the steps to apply to those files
    trimTrailingWhitespace()
    leadingTabsToSpaces(2)
    endWithNewline()
  }
  java {
    targetExclude("**/WeakIdentityHashMap.java")
    googleJavaFormat()
    formatAnnotations()
  }
  groovyGradle {
    target("**/*.gradle")
    greclipse()  // which formatter Spotless should use to format .gradle files.
    leadingTabsToSpaces(2)
    trimTrailingWhitespace()
    // endWithNewline() // Don't want to end empty files with a newline
  }
}

// Error Prone linter

dependencies {
  errorprone("com.google.errorprone:error_prone_core:${errorproneVersion}")
}
tasks.withType(JavaCompile).configureEach {
  // "-processing" avoids javac warning "No processor claimed any of these annotations".
  // "-classfile" is because of classgraph and https://bugs.openjdk.java.net/browse/JDK-8190452
  options.compilerArgs << "-Xlint:all,-processing,-classfile" << "-Werror"
  options.errorprone {
    disable("ExtendsObject")  // Incorrect when using the Checker Framework
    disable("ReferenceEquality") // Use Interning Checker instead.
    disable("StringSplitter") // Obscure case isn't likely.
    disable("AnnotateFormatMethod") // Error Prone doesn't know about Checker Framework @FormatMethod
    disable("UseCorrectAssertInTests") // https://github.com/typetools/checker-framework/issues/3345
  }
  options.errorprone.enabled = isJava17orHigher
}

// Checker Framework pluggable type-checking

apply plugin: "org.checkerframework"

checkerFramework {
  checkers = [
    // No need to run CalledMethodsChecker, because ResourceLeakChecker does so.
    // "org.checkerframework.checker.calledmethods.CalledMethodsChecker",
    "org.checkerframework.checker.formatter.FormatterChecker",
    "org.checkerframework.checker.index.IndexChecker",
    "org.checkerframework.checker.interning.InterningChecker",
    "org.checkerframework.checker.lock.LockChecker",
    "org.checkerframework.checker.nullness.NullnessChecker",
    "org.checkerframework.checker.regex.RegexChecker",
    "org.checkerframework.checker.resourceleak.ResourceLeakChecker",
    "org.checkerframework.checker.signature.SignatureChecker",
    "org.checkerframework.checker.signedness.SignednessChecker",
    "org.checkerframework.common.initializedfields.InitializedFieldsChecker",
  ]
  extraJavacArgs = [
    "-Werror",
    "-AcheckPurityAnnotations",
    "-ArequirePrefixInWarningSuppressions",
    "-AwarnRedundantAnnotations",
    "-AwarnUnneededSuppressions",
  ]
}
// To use a snapshot version of the Checker Framework.
if (true) {
  // TODO: Change the above test to false when CF is released.
  ext.checkerFrameworkVersion = "3.51.1"
  dependencies {
    compileOnly("org.checkerframework:checker-qual:${checkerFrameworkVersion}")
    testCompileOnly("org.checkerframework:checker-qual:${checkerFrameworkVersion}")
    checkerFramework("org.checkerframework:checker:${checkerFrameworkVersion}")
  }
  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, "minutes"
  }
}
// To use a locally-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty("cfLocal")) {
  def cfHome = String.valueOf(System.getenv("CHECKERFRAMEWORK"))
  dependencies {
    compileOnly(files(cfHome + "/checker/dist/checker-qual.jar"))
    testCompileOnly(files(cfHome + "/checker/dist/checker-qual.jar"))
    checkerFramework(files(cfHome + "/checker/dist/checker.jar"))
  }
}

// Javadoc

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption("Xwerror", "-Xdoclint:all")
  options.addStringOption("private", "-quiet")
  options.addStringOption("source", "11")
  doLast {
    ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:"",
    flags:"g", byline:true) {
      fileset(dir: destinationDir)
    }
  }
}
check.dependsOn(javadoc)

tasks.register("javadocWeb", Javadoc) {
  description = "Upload API documentation to website."
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/${project.name}/api")
  classpath = project.sourceSets.main.compileClasspath
  options.addStringOption("source", "11")
  doLast {
    ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:"",
    flags:"g", byline:true) {
      fileset(dir: destinationDir)
    }
    // Set permissions
    project.exec {
      commandLine("chgrp", "-R",  "plse_www", "/cse/web/research/plumelib/${project.name}/api")
    }
    project.exec {
      commandLine("chmod", "-R",  "g+w", "/cse/web/research/plumelib/${project.name}/api")
    }
  }
}

configurations {
  requireJavadoc
}
dependencies {
  requireJavadoc("org.plumelib:require-javadoc:2.0.0")
}
tasks.register("requireJavadoc", JavaExec) {
  // Gradle resolves requireJavadoc's Option dependency to the jar built by this project,
  // so declare an explicit dependency on jar.
  dependsOn(jar)
  group = "Documentation"
  description = "Ensures that Javadoc documentation exists."
  mainClass = "org.plumelib.javadoc.RequireJavadoc"
  classpath = configurations.requireJavadoc
  args("src/main/java")
  jvmArgs += [
    "--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
    "--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
    "--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
    "--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
    "--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
    "--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
    "--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
    "--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
  ]
}
check.dependsOn(requireJavadoc)
javadocWeb.dependsOn(requireJavadoc)

// Emacs support

/* Make Emacs TAGS table */
tasks.register("tags", Exec) {
  description = "Run etags to create an Emacs TAGS table"
  commandLine("bash", "-c", "find src/ -name '*.java' | sort | xargs etags")
}
