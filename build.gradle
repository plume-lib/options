plugins {
  id 'java-library'

  // To create a fat jar build/libs/...-all.jar, run: ./gradlew shadowJar
  id 'com.github.johnrengelman.shadow' version '7.1.2'

  // Code formatting; defines targets "spotlessApply" and "spotlessCheck"
  id 'com.diffplug.spotless' version '6.12.1'

  // Error Prone linter
  id('net.ltgt.errorprone') version '3.0.1'

  // Checker Framework pluggable type-checking
  id 'org.checkerframework' version '0.6.20'
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'io.github.classgraph:classgraph:4.8.153'
  implementation 'org.apache.commons:commons-lang3:3.12.0'
  implementation 'org.apache.commons:commons-text:1.10.0'
  implementation 'org.plumelib:reflection-util:1.0.5'

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

// To upload to Maven Central, see instructions in the file.
apply from: "${buildscript.sourceFile.parent}/gradle/mavencentral.gradle"

sourceCompatibility = 11
targetCompatibility = 11

// Work around https://github.com/johnrengelman/shadow/issues/324
configurations {
  toolsJar  // tools.jar contains the Javadoc tool
}
dependencies {
  if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
    toolsJar files(org.gradle.internal.jvm.Jvm.current().toolsJar)
  }
}
configurations.compileClasspath.extendsFrom configurations.toolsJar

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        excludeEngines 'junit-vintage'
    }
}

spotless {
  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '*.md', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
  java {
    targetExclude('**/WeakIdentityHashMap.java')
    googleJavaFormat()
    formatAnnotations()
  }
}

/// Error Prone linter

dependencies {
  errorprone('com.google.errorprone:error_prone_core:2.16')
}
tasks.withType(JavaCompile).configureEach {
  // "-processing" avoids javac warning "No processor claimed any of these annotations".
  // "-classfile" is because of classgraph and https://bugs.openjdk.java.net/browse/JDK-8190452
  options.compilerArgs << '-Xlint:all,-processing,-classfile' << '-Werror'
  options.errorprone {
    enabled = JavaVersion.current() != JavaVersion.VERSION_1_8
    disable('ReferenceEquality') // Use Interning Checker instead.
    disable('StringSplitter') // Obscure case isn't likely.
    disable('AnnotateFormatMethod') // Error Prone doesn't know about Checker Framework @FormatMethod
    disable('UseCorrectAssertInTests') // https://github.com/typetools/checker-framework/issues/3345
  }
}

/// Checker Framework pluggable type-checking

apply plugin: 'org.checkerframework'

checkerFramework {
  checkers = [
    // No need to run CalledMethodsChecker, because ResourceLeakChecker does so.
    // 'org.checkerframework.checker.calledmethods.CalledMethodsChecker',
    'org.checkerframework.checker.formatter.FormatterChecker',
    'org.checkerframework.checker.index.IndexChecker',
    'org.checkerframework.checker.interning.InterningChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker',
    'org.checkerframework.checker.resourceleak.ResourceLeakChecker',
    'org.checkerframework.checker.signature.SignatureChecker',
    'org.checkerframework.checker.signedness.SignednessChecker',
    'org.checkerframework.common.initializedfields.InitializedFieldsChecker',
  ]
  extraJavacArgs = [
    '-Werror',
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnUnneededSuppressions',
  ]
}

// To use a locally-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty('cfLocal')) {
  def cfHome = String.valueOf(System.getenv('CHECKERFRAMEWORK'))
  dependencies {
    compileOnly files(cfHome + '/checker/dist/checker-qual.jar')
    testCompileOnly files(cfHome + '/checker/dist/checker-qual.jar')
    checkerFramework files(cfHome + '/checker/dist/checker.jar')
  }
}

/// Javadoc

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption('Xwerror', '-Xdoclint:all')
  options.addStringOption('private', '-quiet')
  if (JavaVersion.current().compareTo(org.gradle.api.JavaVersion.VERSION_1_9) >= 0) {
    options.addStringOption('source', '8')
  }
  doLast {
    ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
      flags:'g', byline:true) {
      fileset(dir: destinationDir)
    }
  }
}
check.dependsOn javadoc

task javadocWeb(type: Javadoc) {
  description 'Upload API documentation to website.'
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/${project.name}/api")
  classpath = project.sourceSets.main.compileClasspath
  if (JavaVersion.current().compareTo(org.gradle.api.JavaVersion.VERSION_1_9) >= 0) {
    options.addStringOption('source', '8')
  }
  doLast {
    ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
      flags:'g', byline:true) {
      fileset(dir: destinationDir)
    }
    // Set permissions
    project.exec {
      commandLine('chgrp', '-R',  'plse_www', "/cse/web/research/plumelib/${project.name}/api")
    }
    project.exec {
      commandLine('chmod', '-R',  'g+w', "/cse/web/research/plumelib/${project.name}/api")
    }
  }
}

configurations {
  requireJavadoc
}
dependencies {
  requireJavadoc 'org.plumelib:require-javadoc:1.0.6'
}
task requireJavadoc(type: JavaExec) {
  // Gradle resolves requireJavadoc's Option dependency to the jar built by this project,
  // so declare an explicit dependency on jar.
  dependsOn jar
  description = 'Ensures that Javadoc documentation exists.'
  mainClass = 'org.plumelib.javadoc.RequireJavadoc'
  classpath = configurations.requireJavadoc
  args 'src/main/java'
}
check.dependsOn requireJavadoc
javadocWeb.dependsOn requireJavadoc

/// Emacs support

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description 'Run etags to create an Emacs TAGS table'
  commandLine 'bash', '-c', "find src/ -name '*.java' | sort | xargs etags"
}
